{
    // XMRS, or *MRS, relates to all MRS varieties
    "xmrs": {
        /* sorts are the sortal types of the characteristic variables
         * the values are a list of [sort, supertypes] */
        "sorts": {
            "unknown": ["u", null],
            "handle": ["h", "p"],
            "event": ["e", "i"],
            "ref-ind": ["x", "i"]
        }
    },
    "itsdb": {
        "field_delimiter": "@",
        "relations_filename": "relations",
        "character_escapes": {
            "@": "\\s",
            "\n": "\\n",
            "\\": "\\\\"
        },
        "default_values": {
            "i-wf": 1
        }
    },
    "doe": {
        "commands": {
            "s": {
                "description": "Parse using the source grammar.",
                "task": "parse",
                "grammar": "{source_grammar}",
                "cpu": "ace"
            },
            "o": {
                "description": "Parse using the target grammar.",
                "task": "parse",
                "grammar": "{target_grammar}",
                "cpu": "ace"
            },
            "t": {
                "description": "Transfer semantics with the transfer grammar.",
                "task": "transfer",
                "grammar": "{transfer_grammar}",
                "cpu": "ace"
            },
            "g": {
                "description": "Generate using the target grammar.",
                "task": "generate",
                "grammar": "{target_grammar}",
                "cpu": "ace"
            },
            "j": {
                "description": "Generate using the source grammar.",
                "task": "generate",
                "grammar": "{source_grammar}",
                "cpu": "ace"
            }
        },
        "cpus": {
            /* CPUs are processors of data. They must specify an
             * executable (findable on PATH, or an absolute path), and
             * at least one task. CPUs may optionally define arguments,
             * and tasks may give additional, task-specific arguments.
             * CPUs also specify an interface that manages how data is
             * sent to the processor and how to interpret the output.
             * The default interface, "generic", is chosen if none is
             * specified, and assumes every line sent to the stdin of
             * the executable results in one line on stdout.
             * CPUs that use a grammar argument may use the variable
             * {grammar}, which can change based on the task. See the
             * comment below under "variables".
             */
            "ace": {
                "executable": "ace",
                "arguments": ["-n", "{nsolutions}", "-g", "{grammar}"],
                "interface": "ace",
                "tasks": {
                    "parse": {},
                    "transfer": {},
                    "generate": {
                        "arguments": ["-e"]
                    }
                }
            }
        },
        "variables": {
            /* Generally, "grammar" should be unset, as it is set to
             * a value depending on the task (source_grammar,
             * target_grammar, etc.). If both are set, "grammar" is
             * used regardless of the task.
             */
            "grammar": "",
            "source_grammar": "",
            "transfer_grammar": "",
            "target_grammar": "",
            "nsolutions": 5
        }
    }
}
